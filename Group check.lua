local function BlankFunc() end 

local function GetService(...): Instance
	local Service = game:GetService(...)
	return cloneref and cloneref(Service) or Service
end

local function MergeTables(Table1, ...): SharedTable
	for _, Table in next, {...} do
		for Key, Value in next, Table do
			Table1[Key] = Value
		end
	end
	return Table1
end

local Players: Players = GetService("Players")
local GroupService = GetService("GroupService")
local GroupWatch = {
	Watching = {}
}

function GroupWatch:Watch(Params)
	-- Default options 
	local Group = {
		Id = 0,
		MinRank = 0, -- The lowest rank to trigger a callback
		MaxRank = nil,
		Callback = BlankFunc,
		Enabled = true
	}
	
	local Info = GroupService:GetGroupInfoAsync(Params.Id)
	MergeTables(Group, Params, Info)
	table.insert(self.Watching, Group)
	return Group
end

function GroupWatch:Check(Player: Player)
	for _, Group in next, self.Watching do
		-- Wether the script should ignore the group
		if not Group.Enabled then continue end
		
		local GroupID = Group.Id
		local Success, Rank = pcall(Player.GetRankInGroup, Player, GroupID)

		if not Success or not Rank then
			continue
		end
		
		local MinRank = Group.MinRank
		local MaxRank = Group.MaxRank
		if (Rank >= MinRank) and (MaxRank and Rank <= MaxRank or true) then
			Group.Callback(Player, Rank, Group)
		end
	end
	return self
end

function GroupWatch:ScanPlayers()
	for _, Player: Player in next, Players:GetPlayers() do
		GroupWatch:Check(Player)
	end
	return self
end

Players.PlayerAdded:Connect(function(Player: Player)
	GroupWatch:Check(Player)
end)

return GroupWatch
